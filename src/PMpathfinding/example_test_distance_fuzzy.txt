class Example extends Phaser.Scene
{
    position;
    out;
    text;
    line;
    graphics;
    pa;
    pb;

    create ()
    {
        this.graphics = this.add.graphics({ lineStyle: { width: 1, color: 0xaa00aa }, fillStyle: { color: 0x0000aa } });

        this.line = new Phaser.Geom.Line(5, 107, 150, 120);

        this.out = new Phaser.Math.Vector2();

        this.pa = new Phaser.Math.Vector2();

        this.pb = new Phaser.Math.Vector2();

        this.text = this.add.text(4, 4, '');

        this.position = 50;

        this.input.on('pointermove', pointer =>
        {

            //this.line.x2 = pointer.x;
            //this.line.y2 = pointer.y;
            

            this.calculate(pointer);
        });

        //this.calculate();
    }
/*
    update ()
    {
        this.position += this.slope;

        this.position = Phaser.Math.Clamp(this.position, 0, 100);

        this.graphics.clear();

        this.graphics.strokeLineShape(this.line);

        const point = Phaser.Geom.Line.GetPoint(this.line, this.position / 100);

        this.graphics.fillPointShape(point, 25);
    }*/

    calculate (pointer)
    {
        this.graphics.clear();

        this.graphics.strokeLineShape(this.line);

        Phaser.Geom.Line.GetNearestPoint(this.line, pointer, this.out)

        

        this.out.set(Phaser.Math.Clamp(this.out.x, Math.min(this.line.x1, this.line.x2), Math.max(this.line.x1, this.line.x2)),
        Phaser.Math.Clamp(this.out.y, Math.min(this.line.y1, this.line.y2), Math.max(this.line.y1, this.line.y2)))

        this.graphics.fillPointShape(this.out, 2);

        this.text.setText([`x: ${this.out.x}, y: ${this.out.y}`,
        `${this.out.distance(pointer)}`,
        `mousex: ${pointer.x}`,
        `mousey: ${pointer.y}`]
        );
        
    }
}

const config = {
    backgroundColor: '#2dab2d',
    scale: {
        mode: Phaser.Scale.NONE,
        parent: 'phaser-example',
        width: 160,
        height: 144,
        zoom: 4
    },
    type: Phaser.AUTO,
    parent: 'phaser-example',
    scene: Example
};

const game = new Phaser.Game(config);


/*
// "determinant"

class Example extends Phaser.Scene
{
    graphics;
    line2;
    line1;

    create ()
    {
        this.graphics = this.add.graphics();

        this.line1 = new Phaser.Geom.Line(260, 200, 450, 450);
        //this.line2 = new Phaser.Geom.Line(300, 400, 500, 500);

        this.graphics.lineStyle(2, 0x00ff00);
        this.graphics.strokeLineShape(this.line1);
        //this.graphics.lineStyle(2, 0xffff00);
        //this.graphics.strokeLineShape(this.line2);

        this.text = this.add.text(8, 8, "--")
        this.input.on('pointermove', pointer =>
        {
            //this.line2.x2 = pointer.x;
            //this.line2.y2 = pointer.y;
            //const {activePointer: pointer} = this.input;

        this.text.setText(`${this.distanceToSegment(this.line1, pointer)}\n${this.determinant(this.line1, pointer)}`)
        });
    }

    determinant(line, point)
    {
        //det > 0 -> down
        //det < 0 -> up
        const deltaX = line.x2 - line.x1;
        const deltaY = line.y2 - line.y1;
        return deltaX * (point.y - line.y1) - deltaY * (point.x - line.x1)
    }

    distanceToSegment(line, vec)
    { 
      const out = new Phaser.Math.Vector2();
      
      Phaser.Geom.Line.GetNearestPoint(line, vec, out);
      
      out.set( Phaser.Math.Clamp(out.x, Math.min(line.x1, line.x2), Math.max(line.x1, line.x2)), Phaser.Math.Clamp(out.y, Math.min(line.y1, line.y2), Math.max(line.y1, line.y2)) );
      

      return out.distance(vec)
  
    }

    // update ()
    // {
       // Phaser.Geom.Line.Rotate(this.line1, 0.02);

        //this.graphics.clear();
        //this.graphics.fillStyle(0xffffff);
        //this.graphics.lineStyle(2, 0x00ff00);
        //this.graphics.strokeLineShape(this.line1);

//        const p = { x: 0, y: 0 };

//        if (Phaser.Geom.Intersects.LineToLine(this.line1, this.line2, p))
//        {
//            this.graphics.lineStyle(2, 0xff0000);
//            this.graphics.fillPointShape(p, 8);
//        }
//        else
//        {
//            this.graphics.lineStyle(2, 0xffff00);
//        }

//        this.graphics.strokeLineShape(this.line2);

//        this.text.setText(this.distanceToSegment(this.line1, this.input.activePointer))
    // }
}

const config = {
    width: 800,
    height: 600,
    type: Phaser.AUTO,
    parent: 'phaser-example',
    scene: Example
};

const game = new Phaser.Game(config);


*/